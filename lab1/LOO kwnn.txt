euclideanDistance <- function(u, v)
{
	sqrt(sum((u - v)^2))
}

sortObjectsByDist <- function(xl, z, metricFunction =
euclideanDistance)
{

	l <- dim(xl)[1]
	n <- dim(xl)[2] - 1
	distances <- matrix(NA, l, 2)
	for (i in 1:l)
	{
		distances[i, ] <- c(i, metricFunction(xl[i, 1:n], z))
	}

	orderedXl <- xl[order(distances[, 2]), ]
	return (orderedXl);
}

kNN <- function(xl, z, k)
{
	n <- dim(xl)[2] - 1
	classes <- xl[1:k, n + 1]
	counts <- table(classes)
	class <- names(which.max(counts))
	return (class)
}

kwNN <- function(xl, z, k,q)
{
  m <- c("setosa" = 0, "versicolor" = 0, "virginica" = 0)
  n <- dim(xl)[2] - 1
  classes <- xl[1:k, n + 1]
  for(i in i:k)
  {
    w<-q ^ i
    m[classes[i]]<-m[classes[i]]+w
  }
  class <- names(which.max(m))
  return (class)
}


colors <- c("setosa" = "red", "versicolor" = "green3",
"virginica" = "blue") 
xl <- iris[, 3:5]
k <-21
LOO<-rep(0,k)

segment <- seq(from = 0.1, to = 1.1, by = 0.05)

n<-150
K<-c(0,k)
accuracy<-c(0,k)


for(i in 1:n)
{
  z<-c(xl[i,1],xl[i,2])
  
  x<-sortObjectsByDist(xl[, 1:3][-i,], z)
  
  for(j in 1:21)
  {
    class<-kwNN(x,z,k=60,segment[j])
    if(class != xl[i,3])LOO[j]<-LOO[j]+1
    print(class)
    print(xl[i,3])
  }
}
##for (i in 1:k)
##{
##	if(LOO[i]!=0)accuracy[i]<-LOO[i]/n
##	else accuracy[i]<-1
##}
for (i in 1:21)
{
  accuracy[i]<-LOO[i]/n
  print(LOO[i])
}
K <-(seq(from = 0.0, to = 1.0, by = 0.05))
plot(K,accuracy,type = "l")
